require('emitter')

module.exports = Overlay;

/**
 * Initialize a new `Overlay`.
 * @param {Object} opts
 */

function Overlay(opts) {
  View.call(this, '<div id="overlay" class="hide"></div>');
  document.body.appendChild(this.view)
  opts || (opts = {})
  this.delay = 'delay' in opts 
    ? opts.delay
    : 2000
  // default to closable
  if (opts.closable !== false) {
    this.events.on('click');
  }
}

// Inherit from `View`
inherit(Overlay, View);

// alias
var proto = Overlay.prototype

/**
 * Show the overlay.
 *
 * Emits "show" event.
 *
 * @return {Overlay} 
 * @api public
 */

Overlay.prototype.show = function(){
  this.events.emit('show');
  this.classList.remove('hide');
  return this;
};

/**
 * Hide the overlay.
 *
 * Emits "hide" event.
 *
 * @return {Overlay}
 * @api public
 */

Overlay.prototype.hide = function(){
  this.events.emit('hide');
  return this.remove();
};

/**
 * Hide the overlay without emitting "hide".
 *
 * Emits "close" event.
 *
 * @return {Overlay}
 * @api public
 */

Overlay.prototype.remove = function(){
  var self = this;
  this.events.emit('close');
  this.classList.add('hide');
  setTimeout(function(){
    View.prototype.remove.call(self)
  }, this.delay);
  return this;
};
