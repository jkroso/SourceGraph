#!/usr/bin/env node

var program = require('commander'),
    Graph = require('../src/index.js'),
    path = require('path'),
    fs = require('fs'),
    uglify = require('uglify-js'),
    all = require('promises').all,
    cwd = process.cwd()

var requireCode = fs.readFileSync(path.join(__dirname, '../src/require.js'), 'utf-8')

program.version('0.0.1')
    .usage('[options]')
    .option('-e, --entry [path]', 'Path to the head of your code', './example/index.js')
    .option('-o, --output [path]', 'Path to your built code', './test/built-graph.js')
    .option('-x, --export [name]', 'Global variable for your package')
    .option('-b, --beautify', 'Format to idiomatic JS')
    .option('-c, --compress', 'Minify the loader script')
    .option('-l, --leave-ast', 'Leave ast alone')
    .parse(process.argv)

var entry = path.resolve(cwd, program.entry)
var output = path.resolve(cwd, program.output);

new Graph(entry).end(function (graph) {
    var modules = {}
    Object.keys(graph).forEach(function (p) {
        modules[p] = graph[p].text
    })
    var out = '!function(){\n'
        + requireCode + '\n'
        + 'var modules = ' + JSON.stringify(modules) + '\n' 
        + (program.export ? program.export+' = ' : '') + 'require("'+entry+'")\n'
        + '}()'

    out = minify(out, {
        compress: program.compress,
        beautify: program.beautify
    })

    fs.writeFile(output, out, 'utf-8', function () {
        debugger;
        process.exit()
    })
})

function minify (code, options) {
    var toplevel = uglify.parse(code)
    toplevel.figure_out_scope()
    if (!program.leaveAst) {
        toplevel.transform(uglify.Compressor())
        toplevel.figure_out_scope()
    }
    toplevel.compute_char_frequency()
    if (options.compress) toplevel.mangle_names()
    return toplevel.print_to_string({beautify:options.beautify})
}